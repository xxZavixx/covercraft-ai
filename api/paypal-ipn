// /api/paypal-ipn.js

import { NextApiRequest, NextApiResponse } from "next";
import * as admin from "firebase-admin";
import fetch from "node-fetch";
import { Buffer } from "buffer";

// Initialize Firebase Admin SDK once
if (!admin.apps.length) {
  const serviceAccount = JSON.parse(
    Buffer.from(process.env.FIREBASE_SERVICE_ACCOUNT_BASE64, "base64").toString("utf8")
  );

  admin.initializeApp({
    credential: admin.credential.cert(serviceAccount),
  });
}

const db = admin.firestore();

export default async function handler(req, res) {
  if (req.method !== "POST") {
    return res.status(405).end("Only POST allowed");
  }

  try {
    const body = new URLSearchParams(req.body).toString();

    const verifyRes = await fetch("https://ipnpb.paypal.com/cgi-bin/webscr", {
      method: "POST",
      headers: {
        "Content-Type": "application/x-www-form-urlencoded",
      },
      body: `cmd=_notify-validate&${body}`,
    });

    const verifyText = await verifyRes.text();

    if (verifyText === "VERIFIED") {
      const {
        payment_status,
        receiver_email,
        payer_email,
        txn_id,
        payer_id,
        first_name,
        last_name,
        mc_gross,
      } = req.body;

      const isCompleted = payment_status === "Completed";
      const isCorrectEmail = receiver_email === "xzavierharris25@gmail.com";

      if (isCompleted && isCorrectEmail) {
        const email = payer_email.toLowerCase();
        const buyerRef = db.collection("buyers").doc(email);
        const buyerDoc = await buyerRef.get();

        const currentCredits = buyerDoc.exists ? buyerDoc.data()?.credits || 0 : 0;

        // Prevent duplicate processing by checking txn_id
        const txnRef = db.collection("transactions").doc(txn_id);
        const txnDoc = await txnRef.get();

        if (!txnDoc.exists) {
          await buyerRef.set(
            {
              email,
              payer_id,
              payer_name: `${first_name} ${last_name}`,
              amount: mc_gross,
              credits: currentCredits + 15, // add 15 new credits
              lastPayment: admin.firestore.FieldValue.serverTimestamp(),
            },
            { merge: true }
          );

          await txnRef.set({
            email,
            amount: mc_gross,
            timestamp: admin.firestore.FieldValue.serverTimestamp(),
          });

          console.log("✅ Buyer and transaction stored.");
        } else {
          console.log("ℹ️ Transaction already exists. Skipping duplicate.");
        }
      } else {
        console.log("⚠️ Payment not completed or wrong receiver email.");
      }
    } else {
      console.log("❌ Invalid IPN: PayPal did not verify.");
    }

    res.status(200).end();
  } catch (error) {
    console.error("❌ IPN Handler Error:", error);
    res.status(500).end("Internal server error");
  }
}